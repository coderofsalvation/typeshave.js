// Generated by CoffeeScript 1.10.0
(function() {
  var TYPESAFE_FAIL, bar, error, error1, foo, mydata, typesafe, typeshave;

  typeshave = require('../index.coffee');

  typeshave.verbose = 1;

  typesafe = typeshave.typesafe;

  mydata = {
    type: "object",
    properties: {
      foo: {
        type: "string",
        regex: /abc/
      },
      bar: {
        type: "integer",
        minimum: 0,
        maximum: 100
      },
      records: {
        type: "array",
        items: [
          {
            name: {
              type: "string",
              minLength: 2
            },
            age: {
              type: "integer"
            }
          }
        ]
      }
    },
    required: ["foo", "records"]
  };

  foo = typesafe(mydata, function(data) {
    return console.log("valid data passed!");
  });

  try {
    foo({});
  } catch (error) {
    TYPESAFE_FAIL = error;
    console.log("ok");
  }

  foo = typesafe({
    foo: {
      type: "string"
    },
    bar: {
      type: "integer"
    }
  }, function(foo, bar) {
    return console.log("arguments are valid");
  });

  bar = typesafe({
    one: {
      type: "integer"
    },
    two: {
      type: "integer"
    }
  }, function(one, two) {
    return console.log(one + " " + two);
  });

  try {
    foo(123, 123);
  } catch (error1) {
    TYPESAFE_FAIL = error1;
    console.log("recover");
  } finally {
    console.log("finish");
  }

  bar("foo", 123);

}).call(this);
